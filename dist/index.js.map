{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["import defaultResolver from 'jest-resolve/build/defaultResolver';\n\n/**\n * A `RegExp` that checks if file name has JavaScript extension.\n */\nconst JAVASCRIPT_EXTENSION = /\\.js$/i;\n\n/**\n * A list of TypeScript file extensions, in the order used by its resolver.\n */\nconst TYPESCRIPT_EXTENSIONS = ['.ts', '.tsx'];\n\nexport type Path = Parameters<typeof defaultResolver>[0];\n\nexport type ResolverOptions = Parameters<typeof defaultResolver>[1];\n\n/**\n * A resolver for `jest` that uses same strategy as TS when resolving files with\n * JavaScript extension (\".js\"). Otherwise it just uses default resolver.\n *\n * When receives a path with JavaScript extension (\".js\"):\n * 1. It tries to resolve to a path with \".ts\".\n * 2. If no file was found, it tries to resolve to a path with \".tsx\".\n * 3. If no file was found, it resolves to original path (with \".js\").\n */\nfunction resolverForTSJest(path: Path, options: ResolverOptions): Path {\n  const resolver = options.defaultResolver || defaultResolver;\n\n  if (JAVASCRIPT_EXTENSION.test(path)) {\n    for (const extension of TYPESCRIPT_EXTENSIONS) {\n      try {\n        return resolver(path.replace(JAVASCRIPT_EXTENSION, extension), options);\n      } catch {\n        continue;\n      }\n    }\n  }\n\n  return resolver(path, options);\n}\n\nexport default resolverForTSJest;\n"],"names":["defaultResolver"],"mappings":";;;;;;;;;;;;;;AAEA;;;AAGA,IAAM,oBAAoB,GAAG,QAAQ,CAAC;AAEtC;;;AAGA,IAAM,qBAAqB,GAAG,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;AAM9C;;;;;;;;;AASA,SAAS,iBAAiB,CAAC,IAAU,EAAE,OAAwB;IAC7D,IAAM,QAAQ,GAAG,OAAO,CAAC,eAAe,IAAIA,mCAAe,CAAC;IAE5D,IAAI,oBAAoB,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;QACnC,KAAwB,UAAqB,EAArB,+CAAqB,EAArB,mCAAqB,EAArB,IAAqB,EAAE;YAA1C,IAAM,SAAS,8BAAA;YAClB,IAAI;gBACF,OAAO,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,oBAAoB,EAAE,SAAS,CAAC,EAAE,OAAO,CAAC,CAAC;aACzE;YAAC,WAAM;gBACN,SAAS;aACV;SACF;KACF;IAED,OAAO,QAAQ,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;AACjC;;;;"}